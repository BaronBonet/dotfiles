alias ea="chezmoi edit -a ~/.config/.aliases"

alias sz="echo Applying new zshrc configs; source ~/.config/zsh/.zshrc"

# Git
alias g="git"
alias gs='git status'
alias ga='git add'
alias gp='git push'
alias gpf='git push --force-with-lease'
alias gc='git commit'
alias gca='git commit --amend'
alias gd='git diff'
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>    %Creset' --abbrev-commit"
# Go to project root
alias groot='[ ! -z `git rev-parse --show-cdup` ] && cd `git rev-parse --show-cdup || pwd`'
#


# https://github.com/Peltoche/lsd
alias l="lsd -la"
alias lt='l --tree'

alias ch="chezmoi"

# Delete all Non named tmux panes
alias tmux-kill="tmux ls -F'#{session_name}'|egrep '^[0-9]+$'|xargs -I% tmux kill-session -t '=%'"

# Extract archives - use: extract <file>
 # Credits to http://dotfiles.org/~pseup/.bashrc
 function extract() {
   if [ -f $1 ] ; then
     case $1 in
       *.tar.bz2) tar xjf $1 ;;
       *.tar.gz) tar xzf $1 ;;
       *.bz2) bunzip2 $1 ;;
       *.rar) rar x $1 ;;
       *.gz) gunzip $1 ;;
       *.tar) tar xf $1 ;;
       *.tbz2) tar xjf $1 ;;
       *.tgz) tar xzf $1 ;;
       *.zip) unzip $1 ;;
       *.Z) uncompress $1 ;;
       *.7z) 7z x $1 ;;
       *) echo "'$1' cannot be extracted via extract()" ;;
     esac
   else:q
     echo "'$1' is not a valid file"
   fi
 }

# Cat syntax highlighting
alias c='bat --paging=auto'

# Docker
# stop all running containers
function docker-stop-all() {docker stop "$(docker ps -a -q)"}

# Vim
alias vim='nvim'
alias v='nvim'

alias tf='terraform'

alias awslocal="aws --endpoint-url=http://localhost:64566  --profile=localstack"

alias clion='open -na "CLion.app" --args "$@"'

alias tree="git ls-tree -r --name-only HEAD | tree --fromfile"

source "$XDG_CONFIG_HOME/.aliases/.source_aliases"
source "$XDG_CONFIG_HOME/.aliases/.git"

set_poetry_python() {
  local python_version="$1"
  if [ -z "$python_version" ]; then
    echo "You must provide a Python version as an argument."
    return 1
  fi

  # Check if the Python version is already installed with asdf
  if asdf list python | grep -q "$python_version"; then
    echo "Python $python_version is already installed."
  else
    echo "Installing Python $python_version with asdf..."
    asdf install python "$python_version"
  fi

  # Ensure asdf is initialized in the current shell session
  if [ -z "$(command -v asdf)" ]; then
    echo "Initializing asdf..."
    . $(brew --prefix asdf)/asdf.sh
  fi

# Set the local Python version to the specified version
  asdf local python "$python_version"

  # Find the path to the specified Python version
  local python_path=$(asdf which python)
  if [ -z "$python_path" ]; then
    echo "Failed to find the path for Python $python_version. Make sure it's installed correctly."
    return 1
  fi

  # Set poetry to use the specified Python version
  echo "Setting poetry to use Python from $python_path"
  poetry env use "$python_path"
}

s3pc(){
    filename="$1"
    subfolder="rotterdam-renovation"

    if [[ -z "$filename" ]]; then
        echo "Error: Please provide a filename to copy."
        return 1
    fi

    if [[ -z "$subfolder" ]]; then
        echo "Copying file directly to the bucket root..."
        aws s3 cp "$filename" s3://<bucket-name>/"$filename"
    else
        echo "Copying file to $subfolder subfolder..."
        aws s3 cp "$filename" s3://ericcbonet-blog-cdn/"$subfolder"/"$filename"
    fi
    }
